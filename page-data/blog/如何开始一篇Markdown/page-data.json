{"componentChunkName":"component---src-templates-post-js","path":"/blog/如何开始一篇Markdown","webpackCompilationHash":"836a43ada11cd4823b88","result":{"data":{"markdownRemark":{"html":"<pre><code>Markdown是一种标记语言，文档后缀为 .md，.markdown\n</code></pre>\n<h3>标题</h3>\n<pre><code>使用 # 号表示 1 - 6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。\n</code></pre>\n<blockquote>\n<p>示例：</p>\n</blockquote>\n<pre><code># 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n</code></pre>\n<blockquote>\n<ul>\n<li>\n<h1>一级标题</h1>\n</li>\n<li>\n<h2>二级标题</h2>\n</li>\n<li>\n<h3>三级标题</h3>\n</li>\n<li>\n<h4>四级标题</h4>\n</li>\n<li>\n<h5>五级标题</h5>\n</li>\n<li>\n<h6>六级标题</h6>\n</li>\n</ul>\n</blockquote>\n<hr>\n<h3>字体</h3>\n<pre><code>字体修饰可分为斜体和粗体。\n用 * 号和 _ （短下划线）表示斜体或者粗体\n</code></pre>\n<blockquote>\n<p>示例：</p>\n</blockquote>\n<pre><code>*斜体*\n_斜体_\n**粗体**\n__粗体__\n***斜粗体***\n__斜粗体__\n</code></pre>\n<blockquote>\n<ul>\n<li><em>斜体</em></li>\n<li><em>斜体</em></li>\n<li><strong>粗体</strong></li>\n<li><strong>粗体</strong></li>\n<li><strong><em>斜粗体</em></strong></li>\n<li><strong>斜粗体</strong></li>\n</ul>\n</blockquote>\n<hr>\n<h3>链接</h3>\n<pre><code>链接语法是一个中括号放显示的文本紧接着一个圆括号放真是地址，形如：[链接文本]（链接地址）\n</code></pre>\n<blockquote>\n<p>示例：</p>\n</blockquote>\n<pre><code>[百度](http:www.baidu.com)一下，你就知道！\n</code></pre>\n<p><a href=\"http:www.baidu.com\">百度</a>一下，你就知道！</p>\n<hr>\n<h3>图片</h3>\n<pre><code>markdown中引用一个图片的语法是：开头一个感叹号，接着一个方括号，里面是alt的属性值，接着一个圆括号，里面是图片的地址。形如：\n![alt 属性文本](图片地址 '可选标题')\n</code></pre>\n<blockquote>\n<p>示例：</p>\n</blockquote>\n<pre><code>![百度图片](https://www.baidu.com/img/baidu_jgylogo3.gif)\n</code></pre>\n<p><img src=\"https://www.baidu.com/img/baidu_jgylogo3.gif\" alt=\"百度图片\"></p>\n<hr>\n<h3>分割线</h3>\n<pre><code>可以用三个及以上的星号、减号、下划线来创建一个分割线\n</code></pre>\n<blockquote>\n<p>示例：</p>\n</blockquote>\n<pre><code>***\n---\n___\n</code></pre>\n<blockquote>\n<hr>\n<hr>\n<hr>\n</blockquote>\n<hr>\n<h3>删除线</h3>\n<pre><code>若需要在文字上添加删除线，可以在文字的两端添加两个波浪线 〰️\n</code></pre>\n<blockquote>\n<p>示例：</p>\n</blockquote>\n<pre><code>我是前面 ~~我是被删除的对象~~ 我是后面\n</code></pre>\n<blockquote>\n<p>我是前面 <del>我是被删除的对象</del> 我是后面</p>\n</blockquote>\n<hr>\n<h3>下划线</h3>\n<pre><code>下划线可以使用&#x3C;u>标签来表示\n</code></pre>\n<blockquote>\n<p>示例：</p>\n</blockquote>\n<pre><code>&#x3C;u>我有下划线&#x3C;u>\n</code></pre>\n<blockquote>\n<p><u>我有下划线</u></p>\n</blockquote>\n<hr>\n<h3>列表</h3>\n<pre><code>列表分为有序列表和无序列表，无序列表使用 * 、+ 、- 作为无序列表的标记.\n有序列表使用数字加上.号来表示。\n嵌套列表则在子列表的前面添加4个空格\n\n⚠️ 符号和文本之间有空格\n</code></pre>\n<blockquote>\n<p>示例：</p>\n</blockquote>\n<pre><code>1. 无序列表\n    - 列表1\n    + 列表2\n    * 列表3\n2. 有序列表\n    1. 有序列表1\n    2. 有序列表2\n</code></pre>\n<ol>\n<li>\n<p>无序列表</p>\n<ul>\n<li>列表1</li>\n<li>列表2</li>\n<li>列表3</li>\n</ul>\n</li>\n<li>\n<p>有序列表</p>\n<ol>\n<li>有序列表1</li>\n<li>有序列表2</li>\n</ol>\n</li>\n</ol>\n<hr>\n<h3>区块引用</h3>\n<pre><code>区块引用是在段落的开头使用 > 符号，后面紧接着一个空格符号\n</code></pre>\n<blockquote>\n<p>示例</p>\n</blockquote>\n<pre><code>> 名人名言\n> 真的很有真理\n> 提升文本的价值\n</code></pre>\n<blockquote>\n<p>名人名言\n真的很有真理\n提升文本的价值</p>\n</blockquote>\n<hr>\n<h3>代码区块</h3>\n<pre><code>代码段落可以使用反引号 ` 包裹，整个代码片段可以使用一个Tab（4个空格）或者 ``` 包裹。\n</code></pre>\n<blockquote>\n<p>例如</p>\n</blockquote>\n<ul>\n<li>\n<p>代码片段</p>\n<pre><code>`sayHello()`函数将会打印出hello\n</code></pre>\n<p><code>sayHello()</code>函数将会打印出hello</p>\n</li>\n<li>\n<p>制表符包裹代码片段</p>\n<pre><code>hello() {\n    console.log('hello');\n}\n</code></pre>\n<p>hello() {\nconsole.log('hello');\n}</p>\n</li>\n<li><code>```</code>包裹代码片段， 后面可以指定一种语言类型</li>\n</ul>\n<p><img src=\"../../images/code.jpeg\" alt=\"代码片段\"></p>\n<pre><code>    hello() {\n            console.log('hello');\n    }\n</code></pre>","timeToRead":2,"wordCount":{"words":55},"frontmatter":{"date":"2019-01-01","path":"/blog/如何开始一篇Markdown","title":"如何开始一篇Markdown"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}